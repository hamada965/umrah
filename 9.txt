
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نظام شركة الحجيج المحاسبي</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(45deg, #2c3e50, #3498db);
            color: white;
            text-align: center;
            padding: 30px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }
        
        .nav-tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            background: #f8f9fa;
            border: none;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .nav-tab:hover {
            background: #e9ecef;
        }
        
        .nav-tab.active {
            background: #007bff;
            color: white;
        }
        
        .tab-content {
            display: none;
            padding: 30px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        input:focus, select:focus, textarea:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.25);
        }
        
        .btn {
            padding: 12px 25px;
            margin: 5px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: #007bff;
            color: white;
        }
        
        .btn-primary:hover {
            background: #0056b3;
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-success:hover {
            background: #1e7e34;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .btn-warning {
            background: #ffc107;
            color: #212529;
        }
        
        .btn-warning:hover {
            background: #e0a800;
        }
        
        .table-container {
            overflow-x: auto;
            margin-top: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }
        
        th, td {
            padding: 12px;
            text-align: center;
            border-bottom: 1px solid #dee2e6;
        }
        
        th {
            background: #f8f9fa;
            font-weight: bold;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
        }
        
        tr:hover {
            background: #f8f9fa;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }
        
        .summary-card h3 {
            font-size: 1.8em;
            margin-bottom: 10px;
        }
        
        .summary-card p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            font-weight: bold;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .print-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
        }
        
        @media print {
            body * {
                visibility: hidden;
            }
            .print-content, .print-content * {
                visibility: visible;
            }
            .print-content {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
        }
        
        .badge {
            display: inline-block;
            padding: 4px 8px;
            font-size: 12px;
            font-weight: bold;
            border-radius: 12px;
            color: white;
        }
        
        .badge-paid {
            background: #28a745;
        }
        
        .badge-pending {
            background: #ffc107;
            color: #212529;
        }
        
        .badge-overdue {
            background: #dc3545;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🕌 شركة الحجيج للعمرة والحج</h1>
            <p>نظام إدارة العملاء والتأشيرات والمحاسبة</p>
        </div>
        
        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('clients')">إدارة العملاء</button>
            <button class="nav-tab" onclick="showTab('visas')">إدارة التأشيرات</button>
            <button class="nav-tab" onclick="showTab('payments')">المدفوعات</button>
            <button class="nav-tab" onclick="showTab('expenses')">المصروفات</button>
            <button class="nav-tab" onclick="showTab('reports')">التقارير</button>
        </div>
        
        <!-- إدارة العملاء -->
        <div id="clients" class="tab-content active">
            <h2>إدارة العملاء وجوازات السفر</h2>
            
            <div class="form-row">
                <div class="form-group">
                    <label>اسم العميل</label>
                    <input type="text" id="clientName" placeholder="أدخل اسم العميل">
                </div>
                <div class="form-group">
                    <label>تاريخ استلام الجوازات</label>
                    <input type="date" id="passportDate">
                </div>
                <div class="form-group">
                    <label>عدد الجوازات المستلمة</label>
                    <input type="number" id="passportCount" min="1" placeholder="عدد الجوازات">
                </div>
                <div class="form-group">
                    <label>رقم الهاتف</label>
                    <input type="tel" id="clientPhone" placeholder="رقم الهاتف">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label>سعر التأشيرة (دينار كويتي)</label>
                    <input type="number" id="visaPrice" step="0.001" placeholder="سعر التأشيرة">
                </div>
                <div class="form-group">
                    <label>نوع الخدمة</label>
                    <select id="serviceType">
                        <option value="عمرة">عمرة</option>
                        <option value="حج">حج</option>
                        <option value="عمرة وحج">عمرة وحج</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>ملاحظات</label>
                    <textarea id="clientNotes" rows="3" placeholder="ملاحظات إضافية"></textarea>
                </div>
            </div>
            
            <div class="form-group">
                <button class="btn btn-primary" onclick="addClient()">إضافة عميل</button>
                <button class="btn btn-warning" onclick="clearClientForm()">مسح النموذج</button>
            </div>
            
            <div class="table-container">
                <table id="clientsTable">
                    <thead>
                        <tr>
                            <th>اسم العميل</th>
                            <th>تاريخ الاستلام</th>
                            <th>عدد الجوازات</th>
                            <th>رقم الهاتف</th>
                            <th>سعر التأشيرة</th>
                            <th>إجمالي المبلغ</th>
                            <th>نوع الخدمة</th>
                            <th>الحالة</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        
        <!-- إدارة التأشيرات -->
        <div id="visas" class="tab-content">
            <h2>إدارة التأشيرات وشركة العمرة</h2>
            
            <div class="form-row">
                <div class="form-group">
                    <label>اسم شركة العمرة</label>
                    <input type="text" id="umrahCompany" placeholder="اسم شركة العمرة">
                </div>
                <div class="form-group">
                    <label>عدد التأشيرات المطلوبة</label>
                    <input type="number" id="visasRequested" min="1" placeholder="عدد التأشيرات">
                </div>
                <div class="form-group">
                    <label>سعر التأشيرة من الشركة</label>
                    <input type="number" id="companyVisaPrice" step="0.001" placeholder="السعر بالدينار الكويتي">
                </div>
                <div class="form-group">
                    <label>تاريخ الطلب</label>
                    <input type="date" id="visaOrderDate">
                </div>
            </div>
            
            <div class="form-group">
                <button class="btn btn-primary" onclick="addVisaOrder()">إضافة طلب تأشيرات</button>
            </div>
            
            <div class="table-container">
                <table id="visaOrdersTable">
                    <thead>
                        <tr>
                            <th>شركة العمرة</th>
                            <th>عدد التأشيرات</th>
                            <th>سعر الوحدة</th>
                            <th>إجمالي المبلغ</th>
                            <th>تاريخ الطلب</th>
                            <th>المدفوع</th>
                            <th>المتبقي</th>
                            <th>الحالة</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        
        <!-- المدفوعات -->
        <div id="payments" class="tab-content">
            <h2>إدارة المدفوعات</h2>
            
            <div class="form-row">
                <div class="form-group">
                    <label>العميل</label>
                    <select id="paymentClient">
                        <option value="">اختر العميل</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>المبلغ المدفوع</label>
                    <input type="number" id="paymentAmount" step="0.001" placeholder="المبلغ بالدينار الكويتي">
                </div>
                <div class="form-group">
                    <label>طريقة الدفع</label>
                    <select id="paymentMethod">
                        <option value="كاش">كاش</option>
                        <option value="تحويل">تحويل بنكي</option>
                        <option value="شيك">شيك</option>
                        <option value="كي نت">كي نت</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>تاريخ الدفع</label>
                    <input type="date" id="paymentDate">
                </div>
            </div>
            
            <div class="form-group">
                <label>تفاصيل إضافية</label>
                <textarea id="paymentNotes" rows="3" placeholder="رقم التحويل أو تفاصيل أخرى"></textarea>
            </div>
            
            <div class="form-group">
                <button class="btn btn-success" onclick="addPayment()">تسجيل دفعة</button>
            </div>
            
            <div class="table-container">
                <table id="paymentsTable">
                    <thead>
                        <tr>
                            <th>العميل</th>
                            <th>المبلغ</th>
                            <th>طريقة الدفع</th>
                            <th>تاريخ الدفع</th>
                            <th>التفاصيل</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        
        <!-- المصروفات -->
        <div id="expenses" class="tab-content">
            <h2>إدارة المصروفات</h2>
            
            <div class="form-row">
                <div class="form-group">
                    <label>نوع المصروف</label>
                    <select id="expenseType">
                        <option value="دفع لشركة العمرة">دفع لشركة العمرة</option>
                        <option value="مصاريف إدارية">مصاريف إدارية</option>
                        <option value="راتب موظف">راتب موظف</option>
                        <option value="إيجار">إيجار</option>
                        <option value="كهرباء وماء">كهرباء وماء</option>
                        <option value="أخرى">أخرى</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>المبلغ</label>
                    <input type="number" id="expenseAmount" step="0.001" placeholder="المبلغ بالدينار الكويتي">
                </div>
                <div class="form-group">
                    <label>التاريخ</label>
                    <input type="date" id="expenseDate">
                </div>
                <div class="form-group">
                    <label>طريقة الدفع</label>
                    <select id="expensePaymentMethod">
                        <option value="كاش">كاش</option>
                        <option value="تحويل">تحويل بنكي</option>
                        <option value="شيك">شيك</option>
                    </select>
                </div>
            </div>
            
            <div class="form-group">
                <label>تفاصيل المصروف</label>
                <textarea id="expenseDescription" rows="3" placeholder="وصف تفصيلي للمصروف"></textarea>
            </div>
            
            <div class="form-group">
                <button class="btn btn-danger" onclick="addExpense()">تسجيل مصروف</button>
            </div>
            
            <div class="table-container">
                <table id="expensesTable">
                    <thead>
                        <tr>
                            <th>نوع المصروف</th>
                            <th>المبلغ</th>
                            <th>التاريخ</th>
                            <th>طريقة الدفع</th>
                            <th>التفاصيل</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        
        <!-- التقارير -->
        <div id="reports" class="tab-content">
            <h2>التقارير والملخصات المالية</h2>
            
            <div class="summary-cards">
                <div class="summary-card">
                    <h3 id="totalRevenue">0.000</h3>
                    <p>إجمالي الإيرادات (د.ك)</p>
                </div>
                <div class="summary-card">
                    <h3 id="totalPaid">0.000</h3>
                    <p>إجمالي المدفوعات المستلمة (د.ك)</p>
                </div>
                <div class="summary-card">
                    <h3 id="totalPending">0.000</h3>
                    <p>إجمالي المبالغ المستحقة (د.ك)</p>
                </div>
                <div class="summary-card">
                    <h3 id="totalExpenses">0.000</h3>
                    <p>إجمالي المصروفات (د.ك)</p>
                </div>
            </div>
            
            <div class="form-group">
                <button class="btn btn-primary" onclick="generateDetailedReport()">تقرير تفصيلي لكل عميل</button>
                <button class="btn btn-success" onclick="printReport()">طباعة التقرير</button>
            </div>
            
            <div id="detailedReport"></div>
        </div>
    </div>

    <script>
        // متغيرات عامة لتخزين البيانات
        let clients = [];
        let visaOrders = [];
        let payments = [];
        let expenses = [];
        let currentEditingId = null;

        // تهيئة البرنامج
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            updateReportsData();
            document.getElementById('passportDate').valueAsDate = new Date();
            document.getElementById('paymentDate').valueAsDate = new Date();
            document.getElementById('expenseDate').valueAsDate = new Date();
            document.getElementById('visaOrderDate').valueAsDate = new Date();
        });

        // تحميل البيانات المحفوظة
        function loadData() {
            clients = JSON.parse(localStorage.getItem('alhajij_clients') || '[]');
            visaOrders = JSON.parse(localStorage.getItem('alhajij_visaOrders') || '[]');
            payments = JSON.parse(localStorage.getItem('alhajij_payments') || '[]');
            expenses = JSON.parse(localStorage.getItem('alhajij_expenses') || '[]');
            
            renderClientsTable();
            renderVisaOrdersTable();
            renderPaymentsTable();
            renderExpensesTable();
            updatePaymentClientSelect();
        }

        // حفظ البيانات
        function saveData() {
            localStorage.setItem('alhajij_clients', JSON.stringify(clients));
            localStorage.setItem('alhajij_visaOrders', JSON.stringify(visaOrders));
            localStorage.setItem('alhajij_payments', JSON.stringify(payments));
            localStorage.setItem('alhajij_expenses', JSON.stringify(expenses));
        }

        // التنقل بين التبويبات
        function showTab(tabName) {
            // إخفاء جميع التبويبات
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // إظهار التبويب المحدد
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
            
            // تحديث البيانات حسب التبويب
            if (tabName === 'reports') {
                updateReportsData();
            }
        }

        // إضافة عميل جديد
        function addClient() {
            const name = document.getElementById('clientName').value.trim();
            const passportDate = document.getElementById('passportDate').value;
            const passportCount = parseInt(document.getElementById('passportCount').value);
            const phone = document.getElementById('clientPhone').value.trim();
            const visaPrice = parseFloat(document.getElementById('visaPrice').value);
            const serviceType = document.getElementById('serviceType').value;
            const notes = document.getElementById('clientNotes').value.trim();

            if (!name || !passportDate || !passportCount || !visaPrice) {
                alert('يرجى ملء جميع الحقول المطلوبة');
                return;
            }

            const client = {
                id: Date.now(),
                name,
                passportDate,
                passportCount,
                phone,
                visaPrice,
                serviceType,
                notes,
                totalAmount: passportCount * visaPrice,
                createdAt: new Date().toISOString()
            };

            clients.push(client);
            saveData();
            renderClientsTable();
            updatePaymentClientSelect();
            clearClientForm();
            showAlert('تم إضافة العميل بنجاح', 'success');
        }

        // مسح نموذج العميل
        function clearClientForm() {
            document.getElementById('clientName').value = '';
            document.getElementById('passportCount').value = '';
            document.getElementById('clientPhone').value = '';
            document.getElementById('visaPrice').value = '';
            document.getElementById('clientNotes').value = '';
            document.getElementById('passportDate').valueAsDate = new Date();
        }

        // عرض جدول العملاء
        function renderClientsTable() {
            const tbody = document.querySelector('#clientsTable tbody');
            tbody.innerHTML = '';

            clients.forEach(client => {
                const totalPaid = getTotalPaidByClient(client.id);
                const remaining = client.totalAmount - totalPaid;
                const status = remaining <= 0 ? 'مدفوع بالكامل' : `متبقي ${remaining.toFixed(3)} د.ك`;
                const statusClass = remaining <= 0 ? 'badge-paid' : 'badge-pending';

                const row = `
                    <tr>
                        <td>${client.name}</td>
                        <td>${new Date(client.passportDate).toLocaleDateString('ar-SA')}</td>
                        <td>${client.passportCount}</td>
                        <td>${client.phone}</td>
                        <td>${client.visaPrice.toFixed(3)} د.ك</td>
                        <td>${client.totalAmount.toFixed(3)} د.ك</td>
                        <td>${client.serviceType}</td>
                        <td><span class="badge ${statusClass}">${status}</span></td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="printClientReport(${client.id})">طباعة</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteClient(${client.id})">حذف</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // إضافة طلب تأشيرات
        function addVisaOrder() {
            const company = document.getElementById('umrahCompany').value.trim();
            const visasRequested = parseInt(document.getElementById('visasRequested').value);
            const companyVisaPrice = parseFloat(document.getElementById('companyVisaPrice').value);
            const orderDate = document.getElementById('visaOrderDate').value;

            if (!company || !visasRequested || !companyVisaPrice || !orderDate) {
                alert('يرجى ملء جميع الحقول المطلوبة');
                return;
            }

            const visaOrder = {
                id: Date.now(),
                company,
                visasRequested,
                companyVisaPrice,
                orderDate,
                totalAmount: visasRequested * companyVisaPrice,
                paidAmount: 0,
                createdAt: new Date().toISOString()
            };

            visaOrders.push(visaOrder);
            saveData();
            renderVisaOrdersTable();
            clearVisaOrderForm();
            showAlert('تم إضافة طلب التأشيرات بنجاح', 'success');
        }

        // مسح نموذج طلب التأشيرات
        function clearVisaOrderForm() {
            document.getElementById('umrahCompany').value = '';
            document.getElementById('visasRequested').value = '';
            document.getElementById('companyVisaPrice').value = '';
            document.getElementById('visaOrderDate').valueAsDate = new Date();
        }

        // عرض جدول طلبات التأشيرات
        function renderVisaOrdersTable() {
            const tbody = document.querySelector('#visaOrdersTable tbody');
            tbody.innerHTML = '';

            visaOrders.forEach(order => {
                const remaining = order.totalAmount - order.paidAmount;
                const status = remaining <= 0 ? 'مدفوع بالكامل' : 'غير مدفوع';
                const statusClass = remaining <= 0 ? 'badge-paid' : 'badge-pending';

                const row = `
                    <tr>
                        <td>${order.company}</td>
                        <td>${order.visasRequested}</td>
                        <td>${order.companyVisaPrice.toFixed(3)} د.ك</td>
                        <td>${order.totalAmount.toFixed(3)} د.ك</td>
                        <td>${new Date(order.orderDate).toLocaleDateString('ar-SA')}</td>
                        <td>${order.paidAmount.toFixed(3)} د.ك</td>
                        <td>${remaining.toFixed(3)} د.ك</td>
                        <td><span class="badge ${statusClass}">${status}</span></td>
                        <td>
                            <button class="btn btn-success btn-sm" onclick="payToCompany(${order.id})">دفع</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteVisaOrder(${order.id})">حذف</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // إضافة دفعة
        function addPayment() {
            const clientId = parseInt(document.getElementById('paymentClient').value);
            const amount = parseFloat(document.getElementById('paymentAmount').value);
            const method = document.getElementById('paymentMethod').value;
            const date = document.getElementById('paymentDate').value;
            const notes = document.getElementById('paymentNotes').value.trim();

            if (!clientId || !amount || !method || !date) {
                alert('يرجى ملء جميع الحقول المطلوبة');
                return;
            }

            const client = clients.find(c => c.id === clientId);
            if (!client) {
                alert('العميل غير موجود');
                return;
            }

            const totalPaid = getTotalPaidByClient(clientId);
            if (totalPaid + amount > client.totalAmount) {
                if (!confirm(`المبلغ المدفوع سيتجاوز المبلغ المطلوب. المتبقي: ${(client.totalAmount - totalPaid).toFixed(3)} د.ك. هل تريد المتابعة؟`)) {
                    return;
                }
            }

            const payment = {
                id: Date.now(),
                clientId,
                clientName: client.name,
                amount,
                method,
                date,
                notes,
                createdAt: new Date().toISOString()
            };

            payments.push(payment);
            saveData();
            renderPaymentsTable();
            renderClientsTable();
            clearPaymentForm();
            updateReportsData();
            showAlert('تم تسجيل الدفعة بنجاح', 'success');
        }

        // مسح نموذج الدفع
        function clearPaymentForm() {
            document.getElementById('paymentClient').value = '';
            document.getElementById('paymentAmount').value = '';
            document.getElementById('paymentNotes').value = '';
            document.getElementById('paymentDate').valueAsDate = new Date();
        }

        // عرض جدول المدفوعات
        function renderPaymentsTable() {
            const tbody = document.querySelector('#paymentsTable tbody');
            tbody.innerHTML = '';

            payments.forEach(payment => {
                const row = `
                    <tr>
                        <td>${payment.clientName}</td>
                        <td>${payment.amount.toFixed(3)} د.ك</td>
                        <td>${payment.method}</td>
                        <td>${new Date(payment.date).toLocaleDateString('ar-SA')}</td>
                        <td>${payment.notes}</td>
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="deletePayment(${payment.id})">حذف</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // إضافة مصروف
        function addExpense() {
            const type = document.getElementById('expenseType').value;
            const amount = parseFloat(document.getElementById('expenseAmount').value);
            const date = document.getElementById('expenseDate').value;
            const paymentMethod = document.getElementById('expensePaymentMethod').value;
            const description = document.getElementById('expenseDescription').value.trim();

            if (!type || !amount || !date || !paymentMethod) {
                alert('يرجى ملء جميع الحقول المطلوبة');
                return;
            }

            const expense = {
                id: Date.now(),
                type,
                amount,
                date,
                paymentMethod,
                description,
                createdAt: new Date().toISOString()
            };

            expenses.push(expense);
            saveData();
            renderExpensesTable();
            clearExpenseForm();
            updateReportsData();
            showAlert('تم تسجيل المصروف بنجاح', 'success');
        }

        // مسح نموذج المصروف
        function clearExpenseForm() {
            document.getElementById('expenseAmount').value = '';
            document.getElementById('expenseDescription').value = '';
            document.getElementById('expenseDate').valueAsDate = new Date();
        }

        // عرض جدول المصروفات
        function renderExpensesTable() {
            const tbody = document.querySelector('#expensesTable tbody');
            tbody.innerHTML = '';

            expenses.forEach(expense => {
                const row = `
                    <tr>
                        <td>${expense.type}</td>
                        <td>${expense.amount.toFixed(3)} د.ك</td>
                        <td>${new Date(expense.date).toLocaleDateString('ar-SA')}</td>
                        <td>${expense.paymentMethod}</td>
                        <td>${expense.description}</td>
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="deleteExpense(${expense.id})">حذف</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // دفع لشركة العمرة
        function payToCompany(orderId) {
            const amount = prompt('أدخل المبلغ المدفوع:');
            if (!amount || isNaN(amount)) return;

            const payAmount = parseFloat(amount);
            const order = visaOrders.find(o => o.id === orderId);
            
            if (!order) return;

            if (order.paidAmount + payAmount > order.totalAmount) {
                alert('المبلغ المدفوع يتجاوز المبلغ المطلوب');
                return;
            }

            order.paidAmount += payAmount;

            // إضافة المصروف
            const expense = {
                id: Date.now(),
                type: 'دفع لشركة العمرة',
                amount: payAmount,
                date: new Date().toISOString().split('T')[0],
                paymentMethod: 'تحويل',
                description: `دفع لشركة ${order.company} - ${payAmount.toFixed(3)} د.ك`,
                createdAt: new Date().toISOString()
            };

            expenses.push(expense);
            saveData();
            renderVisaOrdersTable();
            renderExpensesTable();
            updateReportsData();
            showAlert('تم تسجيل الدفع بنجاح', 'success');
        }

        // حساب إجمالي المدفوع لعميل
        function getTotalPaidByClient(clientId) {
            return payments
                .filter(p => p.clientId === clientId)
                .reduce((sum, p) => sum + p.amount, 0);
        }

        // تحديث قائمة العملاء في نموذج الدفع
        function updatePaymentClientSelect() {
            const select = document.getElementById('paymentClient');
            select.innerHTML = '<option value="">اختر العميل</option>';
            
            clients.forEach(client => {
                const totalPaid = getTotalPaidByClient(client.id);
                const remaining = client.totalAmount - totalPaid;
                const option = `<option value="${client.id}">${client.name} - متبقي: ${remaining.toFixed(3)} د.ك</option>`;
                select.innerHTML += option;
            });
        }

        // حذف عميل
        function deleteClient(clientId) {
            if (!confirm('هل أنت متأكد من حذف هذا العميل؟')) return;
            
            clients = clients.filter(c => c.id !== clientId);
            payments = payments.filter(p => p.clientId !== clientId);
            saveData();
            renderClientsTable();
            renderPaymentsTable();
            updatePaymentClientSelect();
            updateReportsData();
            showAlert('تم حذف العميل بنجاح', 'success');
        }

        // حذف طلب تأشيرة
        function deleteVisaOrder(orderId) {
            if (!confirm('هل أنت متأكد من حذف هذا الطلب؟')) return;
            
            visaOrders = visaOrders.filter(o => o.id !== orderId);
            saveData();
            renderVisaOrdersTable();
            updateReportsData();
            showAlert('تم حذف الطلب بنجاح', 'success');
        }

        // حذف دفعة
        function deletePayment(paymentId) {
            if (!confirm('هل أنت متأكد من حذف هذه الدفعة؟')) return;
            
            payments = payments.filter(p => p.id !== paymentId);
            saveData();
            renderPaymentsTable();
            renderClientsTable();
            updateReportsData();
            showAlert('تم حذف الدفعة بنجاح', 'success');
        }

        // حذف مصروف
        function deleteExpense(expenseId) {
            if (!confirm('هل أنت متأكد من حذف هذا المصروف؟')) return;
            
            expenses = expenses.filter(e => e.id !== expenseId);
            saveData();
            renderExpensesTable();
            updateReportsData();
            showAlert('تم حذف المصروف بنجاح', 'success');
        }

        // تحديث بيانات التقارير
        function updateReportsData() {
            const totalRevenue = clients.reduce((sum, client) => sum + client.totalAmount, 0);
            const totalPaid = payments.reduce((sum, payment) => sum + payment.amount, 0);
            const totalPending = totalRevenue - totalPaid;
            const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0);

            document.getElementById('totalRevenue').textContent = totalRevenue.toFixed(3);
            document.getElementById('totalPaid').textContent = totalPaid.toFixed(3);
            document.getElementById('totalPending').textContent = totalPending.toFixed(3);
            document.getElementById('totalExpenses').textContent = totalExpenses.toFixed(3);
        }

        // إنشاء تقرير تفصيلي
        function generateDetailedReport() {
            let reportHTML = `
                <div class="print-content">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1>🕌 شركة الحجيج للعمرة والحج</h1>
                        <h2>التقرير التفصيلي للعملاء</h2>
                        <p>تاريخ التقرير: ${new Date().toLocaleDateString('ar-SA')}</p>
                    </div>
                    
                    <div class="summary-cards" style="margin-bottom: 30px;">
                        <div class="summary-card">
                            <h3>${clients.reduce((sum, client) => sum + client.totalAmount, 0).toFixed(3)} د.ك</h3>
                            <p>إجمالي الإيرادات</p>
                        </div>
                        <div class="summary-card">
                            <h3>${payments.reduce((sum, payment) => sum + payment.amount, 0).toFixed(3)} د.ك</h3>
                            <p>إجمالي المدفوعات المستلمة</p>
                        </div>
                        <div class="summary-card">
                            <h3>${(clients.reduce((sum, client) => sum + client.totalAmount, 0) - payments.reduce((sum, payment) => sum + payment.amount, 0)).toFixed(3)} د.ك</h3>
                            <p>إجمالي المبالغ المستحقة</p>
                        </div>
                    </div>
            `;

            clients.forEach(client => {
                const clientPayments = payments.filter(p => p.clientId === client.id);
                const totalPaid = clientPayments.reduce((sum, p) => sum + p.amount, 0);
                const remaining = client.totalAmount - totalPaid;

                reportHTML += `
                    <div style="border: 2px solid #ddd; margin: 20px 0; padding: 20px; border-radius: 10px; page-break-inside: avoid;">
                        <h3 style="color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;">
                            ${client.name} - ${client.serviceType}
                        </h3>
                        
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 15px 0;">
                            <div>
                                <p><strong>رقم الهاتف:</strong> ${client.phone}</p>
                                <p><strong>تاريخ استلام الجوازات:</strong> ${new Date(client.passportDate).toLocaleDateString('ar-SA')}</p>
                                <p><strong>عدد الجوازات:</strong> ${client.passportCount}</p>
                                <p><strong>سعر التأشيرة:</strong> ${client.visaPrice.toFixed(3)} د.ك</p>
                            </div>
                            <div>
                                <p><strong>إجمالي المبلغ:</strong> ${client.totalAmount.toFixed(3)} د.ك</p>
                                <p><strong>إجمالي المدفوع:</strong> ${totalPaid.toFixed(3)} د.ك</p>
                                <p><strong>المتبقي:</strong> <span style="color: ${remaining > 0 ? '#dc3545' : '#28a745'}; font-weight: bold;">${remaining.toFixed(3)} د.ك</span></p>
                                <p><strong>الحالة:</strong> <span style="color: ${remaining > 0 ? '#dc3545' : '#28a745'}; font-weight: bold;">${remaining > 0 ? 'غير مكتمل' : 'مدفوع بالكامل'}</span></p>
                            </div>
                        </div>

                        ${client.notes ? `<p><strong>الملاحظات:</strong> ${client.notes}</p>` : ''}

                        ${clientPayments.length > 0 ? `
                            <h4 style="margin-top: 20px; color: #28a745;">سجل المدفوعات:</h4>
                            <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                                <thead>
                                    <tr style="background: #f8f9fa;">
                                        <th style="border: 1px solid #ddd; padding: 8px;">التاريخ</th>
                                        <th style="border: 1px solid #ddd; padding: 8px;">المبلغ</th>
                                        <th style="border: 1px solid #ddd; padding: 8px;">طريقة الدفع</th>
                                        <th style="border: 1px solid #ddd; padding: 8px;">التفاصيل</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${clientPayments.map(payment => `
                                        <tr>
                                            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${new Date(payment.date).toLocaleDateString('ar-SA')}</td>
                                            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${payment.amount.toFixed(3)} د.ك</td>
                                            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${payment.method}</td>
                                            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${payment.notes || '-'}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : '<p style="color: #dc3545; font-style: italic;">لا توجد مدفوعات مسجلة</p>'}
                    </div>
                `;
            });

            reportHTML += '</div>';
            document.getElementById('detailedReport').innerHTML = reportHTML;
        }

        // طباعة تقرير عميل فردي
        function printClientReport(clientId) {
            const client = clients.find(c => c.id === clientId);
            if (!client) return;

            const clientPayments = payments.filter(p => p.clientId === clientId);
            const totalPaid = clientPayments.reduce((sum, p) => sum + p.amount, 0);
            const remaining = client.totalAmount - totalPaid;

            const printContent = `
                <div style="font-family: Arial, sans-serif; direction: rtl; text-align: right;">
                    <div style="text-align: center; margin-bottom: 30px; border-bottom: 3px solid #3498db; padding-bottom: 20px;">
                        <h1 style="color: #2c3e50; margin-bottom: 10px;">🕌 شركة الحجيج للعمرة والحج</h1>
                        <h2 style="color: #3498db;">كشف حساب العميل</h2>
                        <p style="color: #666;">التاريخ: ${new Date().toLocaleDateString('ar-SA')}</p>
                    </div>
                    
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                        <h2 style="color: #2c3e50; margin-bottom: 15px;">${client.name}</h2>
                        
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px;">
                            <div>
                                <p style="margin: 8px 0;"><strong>رقم الهاتف:</strong> ${client.phone}</p>
                                <p style="margin: 8px 0;"><strong>نوع الخدمة:</strong> ${client.serviceType}</p>
                                <p style="margin: 8px 0;"><strong>تاريخ استلام الجوازات:</strong> ${new Date(client.passportDate).toLocaleDateString('ar-SA')}</p>
                                <p style="margin: 8px 0;"><strong>عدد الجوازات:</strong> ${client.passportCount}</p>
                            </div>
                            <div>
                                <p style="margin: 8px 0;"><strong>سعر التأشيرة:</strong> ${client.visaPrice.toFixed(3)} د.ك</p>
                                <p style="margin: 8px 0;"><strong>إجمالي المبلغ:</strong> ${client.totalAmount.toFixed(3)} د.ك</p>
                                <p style="margin: 8px 0;"><strong>إجمالي المدفوع:</strong> ${totalPaid.toFixed(3)} د.ك</p>
                                <p style="margin: 8px 0;"><strong>المبلغ المتبقي:</strong> <span style="color: ${remaining > 0 ? '#dc3545' : '#28a745'}; font-weight: bold; font-size: 18px;">${remaining.toFixed(3)} د.ك</span></p>
                            </div>
                        </div>
                        
                        ${client.notes ? `<p style="margin-top: 15px;"><strong>الملاحظات:</strong> ${client.notes}</p>` : ''}
                    </div>

                    ${clientPayments.length > 0 ? `
                        <div style="margin-top: 30px;">
                            <h3 style="color: #28a745; margin-bottom: 15px;">سجل المدفوعات</h3>
                            <table style="width: 100%; border-collapse: collapse; border: 2px solid #ddd;">
                                <thead>
                                    <tr style="background: #28a745; color: white;">
                                        <th style="border: 1px solid #ddd; padding: 12px;">التاريخ</th>
                                        <th style="border: 1px solid #ddd; padding: 12px;">المبلغ</th>
                                        <th style="border: 1px solid #ddd; padding: 12px;">طريقة الدفع</th>
                                        <th style="border: 1px solid #ddd; padding: 12px;">التفاصيل</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${clientPayments.map(payment => `
                                        <tr style="border-bottom: 1px solid #ddd;">
                                            <td style="border: 1px solid #ddd; padding: 10px; text-align: center;">${new Date(payment.date).toLocaleDateString('ar-SA')}</td>
                                            <td style="border: 1px solid #ddd; padding: 10px; text-align: center; font-weight: bold;">${payment.amount.toFixed(3)} د.ك</td>
                                            <td style="border: 1px solid #ddd; padding: 10px; text-align: center;">${payment.method}</td>
                                            <td style="border: 1px solid #ddd; padding: 10px; text-align: center;">${payment.notes || '-'}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                                <tfoot>
                                    <tr style="background: #f8f9fa; font-weight: bold;">
                                        <td style="border: 1px solid #ddd; padding: 10px; text-align: center;">الإجمالي</td>
                                        <td style="border: 1px solid #ddd; padding: 10px; text-align: center; color: #28a745;">${totalPaid.toFixed(3)} د.ك</td>
                                        <td colspan="2" style="border: 1px solid #ddd; padding: 10px; text-align: center;">-</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    ` : '<div style="text-align: center; color: #dc3545; font-style: italic; margin-top: 20px; padding: 20px; background: #f8d7da; border-radius: 5px;">لا توجد مدفوعات مسجلة لهذا العميل</div>'}
                    
                    <div style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #ddd; text-align: center; color: #666;">
                        <p>هذا التقرير تم إنشاؤه بواسطة نظام شركة الحجيج المحاسبي</p>
                        <p>للاستفسار: اتصل بالشركة</p>
                    </div>
                </div>
            `;

            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                    <head>
                        <title>كشف حساب - ${client.name}</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            @media print {
                                body { margin: 0; }
                            }
                        </style>
                    </head>
                    <body>
                        ${printContent}
                    </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.print();
        }

        // طباعة التقرير العام
        function printReport() {
            generateDetailedReport();
            setTimeout(() => {
                window.print();
            }, 500);
        }

        // عرض التنبيهات
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            
            document.body.insertBefore(alertDiv, document.body.firstChild);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
        }

        // تصدير البيانات
        function exportData() {
            const data = {
                clients,
                visaOrders,
                payments,
                expenses,
                exportDate: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `alhajij_backup_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
        }

        // استيراد البيانات
        function importData(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    if (confirm('هل أنت متأكد من استيراد البيانات؟ سيتم استبدال البيانات الحالية.')) {
                        clients = data.clients || [];
                        visaOrders = data.visaOrders || [];
                        payments = data.payments || [];
                        expenses = data.expenses || [];
                        
                        saveData();
                        loadData();
                        updateReportsData();
                        showAlert('تم استيراد البيانات بنجاح', 'success');
                    }
                } catch (error) {
                    showAlert('خطأ في استيراد البيانات', 'danger');
                }
            };
            reader.readAsText(file);
        }
    </script>
</body>
</html>